package WeatherMod;

public class WeatherMap {
    private final int width;          // ≈°√≠≈ôka mapy
    private final int height;         // v√Ω≈°ka mapy
    private final double scale;       // urƒçuje "zoom" do noise mapy
    private final long seed;          // n√°hodn√Ω seed pro noise
    private WeatherCell[][] grid;     // 2D pole bunƒõk s poƒças√≠m

    public WeatherMap(int width, int height, long seed, double scale) {
        this.width = width;
        this.height = height;
        this.scale = scale;
        this.seed = seed;

        // vytvo≈ôen√≠ pr√°zdn√Ωch bunƒõk (ka≈æd√° bu≈àka m√° stav poƒças√≠)
        grid = new WeatherCell[width][height];
        for (int y = 0; y < height; y++) {
            for (int x = 0; x < width; x++) {
                grid[x][y] = new WeatherCell();
            }
        }
    }

    // konstruktor s v√Ωchoz√≠m scale
    public WeatherMap(int width, int height, long seed) {
        this(width, height, seed, 1);
    }


    // aktualizace poƒças√≠ pro dan√Ω ƒças a v√≠tr
    public void generate(int time, double windX, double windY) {
        OpenSimplexNoise noise = new OpenSimplexNoise(seed);

        // projdi v≈°echny bu≈àky mapy
        for (int y = 0; y < height; y++) {
            for (int x = 0; x < width; x++) {
                WeatherCell cell = grid[x][y];

                // vypoƒç√≠t√°me sou≈ôadnice pro noise
                double nx = (x + windX * time) * scale;
                double ny = (y + windY * time) * scale;

                // noise vrac√≠ hodnotu -1..1, p≈ôevedeme na 0..1
                double value = noise.eval(nx, ny);
                double normalized = (value + 1.0) / 2.0;

                // nastav√≠me z√°kladn√≠ hodnoty bu≈àky




                // urƒç√≠me, kam by v√≠tr odnesl ƒç√°st oblaƒçnosti/vlhkosti
                int targetX = (int) Math.round(x + windX);
                int targetY = (int) Math.round(y + windY);

                // pokud c√≠l existuje v mapƒõ, p≈ôeneseme ƒç√°st hodnot
                if (targetX >= 0 && targetX < width && targetY >= 0 && targetY < height) {
                    WeatherCell target = grid[targetX][targetY];
                    target.cloudiness += cell.cloudiness * 0.2;
                    target.humidity += cell.humidity * 0.2;
                }
            }
        }
    }

    // vrac√≠ cel√Ω grid bunƒõk
    public WeatherCell[][] getGrid() {
        return grid;
    }

    //projede celou m≈ô√≠≈æku a udƒõl√° z√°kladn√≠ operace
    public void tick() {
        for (int x = 0; x < width; x++) {
            for (int y = 0; y < height; y++) {
                WeatherCell cell = grid[x][y];

                if (cell.humidity > 0.6f){
                    cell.cloudiness += 0.002f;
                }
                if (cell.cloudiness > 0.8f){
                    cell.precipitation += 0.1f;
                }
                if (cell.precipitation > 0.6f) {
                    cell.humidity -= 0.05f;
                }
                // omezen√≠ v≈°ech hodnot do 0 do 1
                cell.humidity = Math.max(0f, Math.min(1f, cell.humidity));
                cell.cloudiness = Math.max(0f, Math.min(1f, cell.cloudiness));
                cell.precipitation = Math.max(0f, Math.min(1f, cell.precipitation));

            }
        }





    }


    // p≈ôevod gridu na textovou reprezentaci (ASCII mapu)
    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        for (int y = 0; y < height; y++) {
            for (int x = 0; x < width; x++) {
                WeatherCell cell = grid[x][y];
                String symbol;

                // zobrazen√≠ sr√°≈æek podle intenzity
                if (cell.precipitation < 0.6) {
                    symbol = "‚ö™";
                } else if (cell.precipitation < 0.75) {
                    symbol = "üîµ";
                } else if (cell.precipitation < 0.85) {
                    symbol = "üü¢";
                } else if (cell.precipitation < 0.95) {
                    symbol = "üü°";
                } else {
                    symbol = "üî¥";
                }

                sb.append(symbol).append(" ");
            }
            sb.append("\n");
        }
        return sb.toString();
    }
}
